#!/usr/bin/env ruby

require 'fileutils'

provided_file = ARGV.first

module Deployer
  # Simple method to ensure that two invocations of this don't overlap
  def self.use_lock(&block)
    lock_file = '/tmp/deploy-site.lockfile'

    if File.exists? lock_file
      puts '> The lock exists, exiting'
      exit 0
    end

    File.open(lock_file, 'w+') do |f|
      f.write "#{Process.pid}\n"
    end

    begin
      block.call
    ensure
      File.unlink(lock_file)
    end
  end

  def self.update_deployment(deploy_dir, dir_name)
    unless File.readlink(deploy_dir) == dir_name
      FileUtils.rm_f deploy_dir
      FileUtils.ln_sf(dir_name, deploy_dir)
      puts "Updated the #{deploy_dir} symbolic link"
    end
  end

  def self.deploy!(provided_file, into)
    use_lock do
      dir_name = File.basename(provided_file, File.extname(provided_file))

      unless File.exists? dir_name
        puts "Processing #{provided_file} into #{dir_name}"
        # Unzip it!
        `unzip -qo #{provided_file}`

        if $? != 0
          puts "Something went wrong unzipping #{provided_file}"
          exit 1
        end
      end

      update_deployment(into, dir_name)
    end
  end
end

# If we don't have an argument, let's look in the CWD/archives directory for
# the last file available
if ARGV.size != 1
  base_dir = File.dirname($0)
  archives_dir = File.join(base_dir, 'archives')
  unless File.exists? archives_dir
    puts "> Please provide a zip file generated from the jenkins.io build process"
    exit 1
  end

  archives = Dir.glob("#{archives_dir}/*.zip").sort

  [
    ['current', archives.reject { |f| f =~ /beta/ }.last],
    ['beta', archives.select { |f| f =~ /beta/ }.last],
  ].each do |deploy_dir, archive|
    next if archive.nil?
    Deployer.deploy! archive, deploy_dir
  end

  # Once we've deployed successfully, we can clean up some legacy stuff
  current = File.readlink(File.join(base_dir, 'current'))
  beta = File.readlink(File.join(base_dir, 'beta'))

  if archives.size > 5
    # Let's walk through each archive except the 5 and delete them
    archives[0 ... -5].each do |archive|
      FileUtils.rm_f archive
    end
  end

  Dir.glob(File.join(base_dir, '*')).each do |path|
    # Don't bother looking at non-directories
    next unless File.directory? path

    # Skip our currently deployed sites
    next if path.end_with? current
    next if path.end_with? beta

    FileUtils.rm_rf(path)
  end
end
